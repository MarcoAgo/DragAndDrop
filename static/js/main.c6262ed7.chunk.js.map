{"version":3,"sources":["components/DragDrop.js","helpers/helpers.js","reducers/useReducers.js","App.js","serviceWorker.js","index.js"],"names":["DragDrop","props","data","dispatch","className","inDropZone","onDragEnter","e","preventDefault","stopPropagation","type","dropDepth","handleDragEnter","onDragLeave","handleDragLeave","onDragOver","dataTransfer","dropEffect","handleDragOver","onDrop","files","length","filesList","fileList","map","file","name","filter","includes","clearData","handleDrop","drop","state","action","dropZone","console","log","concat","App","useReducer","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAwBeA,EAhBE,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SAEd,OACI,yBACIC,UAAWF,EAAKG,WAAa,kCAAoC,iBACjEC,YAAa,SAAAC,GAAC,OCXK,SAACA,EAAGL,EAAMC,GACrCI,EAAEC,iBACFD,EAAEE,kBAGFN,EAAS,CAAEO,KAAM,iBAAkBC,UAAWT,EAAKS,UAAY,IDMrCC,CAAgBL,EAAGL,EAAMC,IAC3CU,YAAa,SAAAN,GAAC,OCDK,SAACA,EAAGL,EAAMC,GACrCI,EAAEC,iBACFD,EAAEE,kBAGFN,EAAS,CAAEO,KAAM,iBAAkBC,UAAWT,EAAKS,UAAY,IAC3DT,EAAKS,UAAY,GACrBR,EAAS,CAAEO,KAAM,mBAAoBL,YAAY,IDNvBS,CAAgBP,EAAGL,EAAMC,IAC3CY,WAAY,SAAAR,GAAC,OCWK,SAACA,EAAGJ,GAC9BI,EAAEC,iBACFD,EAAEE,kBAGFF,EAAES,aAAaC,WAAa,OAG5Bd,EAAS,CAAEO,KAAM,mBAAoBL,YAAY,IDnBxBa,CAAeX,EAAGJ,IACnCgB,OAAQ,SAAAZ,GAAC,OCwBK,SAACA,EAAGL,EAAMC,GAChCI,EAAEC,iBACFD,EAAEE,kBAEF,IAAIW,EAAK,YAAOb,EAAES,aAAaI,OAE/B,GAAIA,GAASA,EAAMC,OAAS,EAAG,CAC3B,IAAMC,EAAYpB,EAAKqB,SAASC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAKjDvB,EAAS,CAAEO,KAAM,mBAAoBU,MAFrCA,EAAQA,EAAMO,QAAO,SAAAF,GAAI,OAAKH,EAAUM,SAASH,EAAKC,WAKtDnB,EAAES,aAAaa,YAEf1B,EAAS,CAAEO,KAAM,iBAAkBC,UAAW,IAC9CR,EAAS,CAAEO,KAAM,mBAAoBL,YAAY,KD1ChCyB,CAAWvB,EAAGL,EAAMC,KAEjC,0D,OElBC4B,EAAO,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACxC,OAAQA,EAAOvB,MAOX,IAAK,iBACV,OAAO,eAAKsB,EAAZ,CAAmBrB,UAAWsB,EAAOtB,YAMtC,IAAK,mBACJ,OAAO,eAAKqB,EAAZ,CAAmB3B,WAAY4B,EAAOC,WAMvC,IAAK,mBAEJ,OADAC,QAAQC,IAAIH,GACL,eAAKD,EAAZ,CAAmBT,SAAUS,EAAMT,SAASc,OAAOJ,EAAOb,SAErD,QACI,OAAOY,ICGJM,MA1Bf,WAEE,IAFa,EAQaC,qBAAWR,EANxB,CACXpB,UAAW,EACXN,YAAY,EACZkB,SAAU,KALC,mBAQNS,EARM,KAQC7B,EARD,KAUb,OACE,yBAAKC,UAAU,OACb,sDACA,kBAAC,EAAD,CACEF,KAAM8B,EACN7B,SAAUA,IAEZ,wBAAIC,UAAU,iBAEV4B,EAAMT,SAASC,KAAI,SAAAC,GAAI,OAAI,wBAAIe,IAAKf,EAAKC,MAAOD,EAAKC,YCZ3Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.c6262ed7.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    handleDragEnter,\n    handleDragLeave,\n    handleDragOver,\n    handleDrop,\n} from '../helpers/helpers';\n\nconst DragDrop = (props) => {\n    const { data, dispatch } = props;\n\n    return (\n        <div \n            className={data.inDropZone ? 'drag-drop-zone inside-drag-area' : 'drag-drop-zone'}\n            onDragEnter={e => handleDragEnter(e, data, dispatch)}\n            onDragLeave={e => handleDragLeave(e, data, dispatch)}\n            onDragOver={e => handleDragOver(e, dispatch)}\n            onDrop={e => handleDrop(e, data, dispatch)}\n        >\n            <p>Drag files here to upload</p>\n        </div>\n    );\n};\n\nexport default DragDrop;","/** \n * manage an element that is entering a valid drop area\n */\nexport const handleDragEnter = (e, data, dispatch) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // enter in drop area, increase dropDepth of 1\n    dispatch({ type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth + 1 })\n}\n\n/**\n * manage when an element is dropped out a valid drop area\n */ \nexport const handleDragLeave = (e, data, dispatch) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Leave drop area decrese dropDepth of 1\n    dispatch({ type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth - 1 })\n    if (data.dropDepth > 0) return\n    dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: false})\n}\n\n/**\n * manage when an element is over a valid drag area\n */\nexport const handleDragOver = (e, dispatch) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Copy dragged element\n    e.dataTransfer.dropEffect = 'copy'\n\n    // Set dropZone state to true\n    dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: true })\n}\n\n/**\n * manage when an element is dropped in a valid drop area\n */\nexport const handleDrop = (e, data, dispatch) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let files = [...e.dataTransfer.files]\n\n    if (files && files.length > 0) {\n        const filesList = data.fileList.map(file => file.name)\n\n        // filter files list\n        files = files.filter(file => !filesList.includes(file.name))\n        \n        dispatch({ type: 'ADD_FILE_TO_LIST', files })\n\n        // clear dataTransfer data\n        e.dataTransfer.clearData()\n\n        dispatch({ type: 'SET_DROP_DEPTH', dropDepth: 0 })\n        dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: false })\n    }\n}","// Drag and drop reducer\nexport const drop = (state = {}, action) => {\n    switch (action.type) {\n\t\t/**\n\t\t * Drop\n\t\t * This will be an integer. \n\t\t * We’ll use it to keep track of how many levels deep we are in the drop zone. \n\t\t * Later on, I will explain this with an illustration.\n\t\t */\n        case 'SET_DROP_DEPTH':\n\t\t\treturn { ...state, dropDepth: action.dropDepth }\n\t\t\n\t\t/**\n\t\t * This will be a boolean. \n\t\t * We will use this to keep track of whether we’re inside the drop zone or not.\n\t\t */\n\t\tcase 'SET_IN_DROP_ZONE':\n\t\t\treturn { ...state, inDropZone: action.dropZone }\n\n\t\t/**\n\t\t * This will be a list. \n\t\t * We’ll use it to keep track of files that have been dropped into the drop zone\n\t\t */\t\n\t\tcase 'ADD_FILE_TO_LIST':\n\t\t\tconsole.log(action)\n\t\t\treturn { ...state, fileList: state.fileList.concat(action.files) }\n\n        default:\n            return state\n    }\n}","import React, { useReducer } from 'react';\nimport './App.css';\nimport DragDrop from './components/DragDrop';\nimport { drop } from './reducers/useReducers';\n\nfunction App() {\n\n  const data = { \n    dropDepth: 0,\n    inDropZone: false,\n    fileList: [] \n  }\n\n  const [state, dispatch] = useReducer(drop, data);\n\n  return (\n    <div className=\"App\">\n      <h1>Drag and drop HTML API</h1>\n      <DragDrop \n        data={state}\n        dispatch={dispatch}\n      />\n      <ul className='dropped-files'>\n        {\n          state.fileList.map(file => <li key={file.name}>{file.name}</li>)\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}